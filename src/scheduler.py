# src/bot/scheduler.py
import logging

from aiogram.types import InlineKeyboardMarkup, WebAppInfo, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from sqlalchemy import select, update
from src.db import async_session
from src.models import User
from src.config import settings

scheduler = AsyncIOScheduler()


from aiogram.exceptions import TelegramBadRequest

async def cleanup_unregistered(telegram_id: int):
    """
    Runs 5 days after /start:
     - if fio or specialization still null ‚Üí kick (ban + unban) & DM with a WebApp button
     - only if the user is still in chat
    """
    async with async_session() as sess:
        user = await sess.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user:
            return

        if not user.fio or not user.specialization:
            bot = Bot(token=settings.bot_token)

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
                member = await bot.get_chat_member(chat_id=settings.chat_id, user_id=telegram_id)
                if member.status in ("left", "kicked"):
                    return  # –£–∂–µ –Ω–µ –≤ —á–∞—Ç–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

                # –ö–∏–∫–∞–µ–º: ban ‚Üí unban
                await bot.ban_chat_member(chat_id=settings.chat_id, user_id=telegram_id)

                # –ö–Ω–æ–ø–∫–∞ WebApp –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(
                            text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                            web_app=WebAppInfo(
                                url=f"{settings.webapp_url}/?uid={telegram_id}"
                            )
                        )
                    ]]
                )

                await bot.send_message(
                    chat_id=telegram_id,
                    text=(
                        "–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¢–µ—Ä–∞–ø–∏—è|Reclin. –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É, "
                        "–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –§–ò–û –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
                    ),
                    reply_markup=kb
                )

            except TelegramBadRequest as e:
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –ª–∏—á–∫—É ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                logging.warning(f"Failed to send message or kick user {telegram_id}: {e}")

            finally:
                await bot.session.close()


def setup_scheduler(bot: Bot):
    """
    Call this once at startup.  It both schedules your jobs
    *and* actually kicks the scheduler off.
    """
    # you can schedule other recurring or date‚Äëbased jobs here, e.g.:
    # scheduler.add_job(my_recurring, 'interval', hours=1, args=[‚Ä¶])

    # *** schedule your per-user cleanup jobs when /start runs ***
    # In your /start handler you did:
    #   scheduler.add_job(‚Ä¶, trigger='date', run_date=‚Ä¶, args=[user_id], id=‚Ä¶)
    #
    # so here we only need to start the scheduler itself:

    if not scheduler.running:
        scheduler.start()